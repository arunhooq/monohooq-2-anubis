- name: install AWS dependencies
  tags: functionbeat
  pip:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - boto3
      - botocore

- name: Create a beats directory if it does not exist
  tags: functionbeat
  file:
    path: "{{beats.path}}"
    state: directory
    mode: "0755"
    recurse: yes

# Download binaries
- name: Get beats checksum for MacOS
  tags: functionbeat
  uri:
    url: "https://{{beats.artifactory}}/downloads/beats/{{beats.name}}/{{beats.name}}-{{functionbeat_version}}-darwin-x86_64.tar.gz.sha512"
    method: GET
    return_content: yes
    validate_certs: False
  register: checksum
  when: ansible_distribution == "MacOSX"

- name: Download functionbeat with checksum
  tags: functionbeat
  get_url:
    url: "https://{{beats.artifactory}}/downloads/beats/{{beats.name}}/{{beats.name}}-{{functionbeat_version}}-darwin-x86_64.tar.gz"
    dest: "{{beats.path}}"
    validate_certs: False
    mode: 0755
    checksum: "sha512:{{ checksum.content.split()[0] }}"
  register: beats_downloaded
  when: ansible_distribution == "MacOSX"

- name: Get beats checksum for Linux
  tags: functionbeat
  uri:
    url: "https://{{beats.artifactory}}/downloads/beats/{{beats.name}}/{{beats.name}}-{{functionbeat_version}}-linux-x86_64.tar.gz.sha512"
    method: GET
    return_content: yes
    validate_certs: False
  register: checksum
  when: ansible_distribution != "MacOSX"

- name: Download functionbeat with checksum
  tags: functionbeat
  get_url:
    url: "https://{{beats.artifactory}}/downloads/beats/{{beats.name}}/{{beats.name}}-{{functionbeat_version}}-linux-x86_64.tar.gz"
    dest: "{{beats.path}}"
    validate_certs: False
    mode: 0755
    checksum: "sha512:{{ checksum.content.split()[0] }}"
  register: beats_downloaded
  when: ansible_distribution != "MacOSX"

# Unpack archive

- name: Install gnu-tar in MacOSX
  homebrew:
    name: gnu-tar
    state: present
  when: ansible_distribution == "MacOSX"

- name: Untar beats binaries
  tags: functionbeat
  unarchive:
    src: "{{beats.path}}/{{beats.name}}-{{functionbeat_version}}-linux-x86_64.tar.gz"
    dest: "{{beats.path}}"
    remote_src: True
    validate_certs: False
  when: ansible_distribution != "MacOSX"

- name: Untar beats binaries
  tags: functionbeat
  unarchive:
    src: "{{beats.path}}/{{beats.name}}-{{functionbeat_version}}-darwin-x86_64.tar.gz"
    dest: "{{beats.path}}"
    remote_src: True
    validate_certs: False
  when: ansible_distribution == "MacOSX"

# config setup

- name: clean functionbeat folder
  tags: functionbeat
  command: rm -rf {{beats.path}}/functionbeat

- name: rename functionbeat folder
  tags: functionbeat
  command: mv {{beats.path}}/{{beats.name}}-{{functionbeat_version}}-darwin-x86_64 {{beats.path}}/functionbeat
  when: ansible_distribution == "MacOSX"

- name: rename functionbeat folder
  tags: functionbeat
  command: mv {{beats.path}}/{{beats.name}}-{{functionbeat_version}}-linux-x86_64 {{beats.path}}/functionbeat
  when: ansible_distribution != "MacOSX"

- name: Push configuration for beats
  tags: functionbeat
  template:
    src: "templates/{{beats.name}}.yml.j2"
    dest: "{{ beats.path }}/functionbeat/{{beats.name}}.yml"
    mode: 0644
  when: env != 'prod'

- name: Push configuration for beats
  tags: functionbeat
  template:
    src: "templates/{{beats.name}}.yml.j2"
    dest: "{{ beats.path }}/functionbeat/{{beats.name}}.yml"
    mode: 0644

- name: Deploy function beat
  tags: functionbeat
  command: '{{ beats.path }}/functionbeat/{{beats.name}} -v -e -d "*" deploy {{ functionbeat_log_files }}-cloudwatch'
  args:
    chdir: "{{ beats.path }}/functionbeat"
  register: lambdaresults
  ignore_errors: true

- name: Run function beat update
  tags: functionbeat
  command: '{{ beats.path }}/functionbeat/{{beats.name}} -v -e -d "*" update {{ functionbeat_log_files }}-cloudwatch'
  args:
    chdir: "{{ beats.path }}/functionbeat"
  when: lambdaresults.stdout.find("already exists") != -1
  ignore_errors: true
