// prettier-ignore
Conviva.Impl = Conviva.Impl || {}, Conviva.Impl.Html5PlayerInterface = function (e, t, a) { var n = this; n._lastPlayHeadTimeSpeeds = [], n._timeupdate = 0, n._lastTimeupdate = 0, n._currentTimeIsInvalid = !1, this._timerInterface = new Conviva.Impl.Html5Timer, this._loggingInterface = a.buildLogger(), this._loggingInterface.setModuleName("Html5PlayerInterface"), this._width = -1, this._height = -1, this._addEventListener = function (e, t, a) { void 0 === a && (a = n._videoElement), n._eventListeners.push([e, t, a]), window.addEventListener ? a.addEventListener(e, t, !1) : a.attachEvent("on" + e, t) }, this._removeEventListener = function (e, t, a) { void 0 === a && (a = n._videoElement), window.removeEventListener ? a.removeEventListener(e, t, !1) : a.detachEvent("on" + e, t) }, this._registerVideoEventListeners = function () { n._addEventListener("ended", function () { n._receivedHtml5Event("ended") }), n._addEventListener("pause", function () { n._receivedHtml5Event("pause") }), n._addEventListener("playing", function () { n._receivedHtml5Event("playing"), 0 == n._videoElement.currentTime && (n._currentTimeIsInvalid = !0) }), n._addEventListener("waiting", function () { n._receivedHtml5Event("waiting") }), n._addEventListener("timeupdate", function () { n._currentTimeIsInvalid && (n._timeupdate++ , n._playerStateManager.getPlayerState() !== Conviva.PlayerStateManager.PlayerState.PLAYING && n._receivedHtml5Event("playing")) }), n._addEventListener("error", function () { if (n._videoElement.error) { var e = n._videoElement.error.code; n._reportHtml5Error(e) } }), n._addEventListener("loadedmetadata", n._loadedMetadata), n._addEventListener("seeking", function () { n.isSeekStarted || (n.isSeekStarted = !0, n._playerStateManager.setPlayerSeekStart(-1)), n._currentTimeIsInvalid && n._playerStateManager.getPlayerState() !== Conviva.PlayerStateManager.PlayerState.BUFFERING && (n._log("Adjusting Conviva player state to: BUFFERING"), n._receivedHtml5Event("waiting")) }), n._addEventListener("seeked", function () { n.isSeekStarted = !1, n._playerStateManager.setPlayerSeekEnd() }), n._monitorErrorsFromSourceElements() }, this.getPHT = function () { return 1e3 * n._videoElement.currentTime }, this.getBufferLength = function () { var e = n._videoElement.buffered; if (void 0 !== e) { for (var t = 0, a = 0; a < e.length; a++) { var i = e.start(a), r = e.end(a); i <= n._videoElement.currentTime && n._videoElement.currentTime < r && (t += r - n._videoElement.currentTime) } return n._currentBufferLength = t, 1e3 * n._currentBufferLength } }, this.getSignalStrength = function () { return Conviva.PlayerStateManager.DEFAULT_SIGNAL_STRENGTH }, this.getRenderedFrameRate = function () { return Conviva.PlayerStateManager.DEFAULT_RENDERED_FRAME_RATE }, this._monitorErrorsFromSourceElements = function () { if (void 0 !== n._videoElement.children) { var e = function () { n._log("Caught non-specific error from <source> element, reporting as ERR_UNKNOWN"), n._reportHtml5Error(0) }; n._videoElement._sources = n._videoElement.children; for (var t = 0; t < n._videoElement._sources.length; t++) { var a = n._videoElement._sources[t]; "SOURCE" == a.tagName && n._addEventListener("error", e, a) } } }, this._removeVideoEventHandlers = function () { for (var e = 0; e < n._eventListeners.length; e++) { var t = n._eventListeners[e]; n._removeEventListener(t[0], t[1], t[2]) } n._eventListeners = [] }, this._findCurrentState = function () { n._prevReadyState = n._videoElement.readyState, 0 === n._videoElement.readyState ? n._updateConvivaPlayerState(Conviva.PlayerStateManager.PlayerState.STOPPED) : n._videoElement.ended ? n._updateConvivaPlayerState(Conviva.PlayerStateManager.PlayerState.STOPPED) : (n._videoElement.paused || n._videoElement.seeking) && n._updateConvivaPlayerState(Conviva.PlayerStateManager.PlayerState.PAUSED), n._videoElement.readyState >= n._videoElement.HAVE_METADATA && n._loadedMetadata() }, this._receivedHtml5Event = function (e) { var t = n._convertHtml5EventToConvivaPlayerState(e); n._log("Received HTML5 event: " + e + ". Mapped to Conviva player state: " + t), n._updateConvivaPlayerState(t) }, this._updateConvivaPlayerState = function (e) { n._playerStateManager.getPlayerState() !== e && (n._log("Changing Conviva player state to: " + e), n._playerStateManager.setPlayerState(e), n._resetPlayHeadTimes(), n._playerStateRecentlyChanged = !0) }, this._convertHtml5EventToConvivaPlayerState = function (e) { switch (e) { case "playing": return Conviva.PlayerStateManager.PlayerState.PLAYING; case "waiting": return Conviva.PlayerStateManager.PlayerState.BUFFERING; case "ended": case "stopped": return Conviva.PlayerStateManager.PlayerState.STOPPED; case "pause": return Conviva.PlayerStateManager.PlayerState.PAUSED; default: return Conviva.PlayerStateManager.PlayerState.UNKNOWN } }, this._reportHtml5Error = function (e) { var t; switch (e) { case 1: t = "MEDIA_ERR_ABORTED"; break; case 2: t = "MEDIA_ERR_NETWORK"; break; case 3: t = "MEDIA_ERR_DECODE"; break; case 4: t = "MEDIA_ERR_SRC_NOT_SUPPORTED"; break; default: t = "MEDIA_ERR_UNKNOWN" }n._log("Reporting error: code=" + e + " message=" + t); var a = Conviva.Client.ErrorSeverity.FATAL; n._playerStateManager.sendError(t, a) }, this._loadedMetadata = function () { var e = n._videoElement.duration; isNaN(e) || e == 1 / 0 || n._playerStateManager.setDuration(e); var t = n._videoElement.videoWidth; !isNaN(t) && t >= 0 && n._playerStateManager.setVideoResolutionWidth(t); var a = n._videoElement.videoHeight; !isNaN(a) && a >= 0 && n._playerStateManager.setVideoResolutionHeight(a) }, this._startPolling = function () { this._previousPosition = 0, this._currentPosition = 0, this._currentBufferLength = 0, this._pollingTimerCancel = this._timerInterface.createTimer(this._poll, 500, "Html5PlayerInterface._poll()") }, this._poll = function () { n._pollStreamerResolution(), n._pollPosition(), n._inferPlayerStateFromPosition() }, this._pollStreamerResolution = function () { var e = n._videoElement.videoWidth; !isNaN(e) && e >= 0 && e != n._width && (n._playerStateManager.setVideoResolutionWidth(e), n._width = e); var t = n._videoElement.videoHeight; !isNaN(t) && t >= 0 && t != n._height && (n._playerStateManager.setVideoResolutionHeight(t), n._height = t) }, this._pollPosition = function () { if (n._previousPosition = n._currentPosition, n._currentPosition = n._videoElement.currentTime, now = Date.now(), n._lastPollTime > 0 && now > n._lastPollTime) { var e = n._currentPosition - n._previousPosition; 0 > e && (e = 0), currentPhtSpeed = e / (now - n._lastPollTime) * 1e3, n._lastPlayHeadTimeSpeeds.push(currentPhtSpeed) } n._lastPollTime = now, n._lastPlayHeadTimeSpeeds.length > Math.max(8, 4) && n._lastPlayHeadTimeSpeeds.shift() }, this._inferPlayerStateFromPosition = function () { var e = n._lastPlayHeadTimeSpeeds.length; if (e >= Math.min(4, 8)) { for (var t = 0, a = n._lastPlayHeadTimeSpeeds.slice(), i = 0; i < a.length; i++) { t += a[i] } t /= e; var r = 1, o = .25, l = n._videoElement.playbackRate; !isNaN(l) && l != 1 / 0 && l > 0 && (isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") > 0, isSafari && .5 > l && (l = .5), r *= l, o *= l); var s = n._playerStateManager.getPlayerState(); if (s != Conviva.PlayerStateManager.PlayerState.PLAYING && e >= 4 && Math.abs(t - r) < o) return n._log("Adjusting Conviva player state to: PLAYING"), void n._updateConvivaPlayerState(Conviva.PlayerStateManager.PlayerState.PLAYING); if (s == Conviva.PlayerStateManager.PlayerState.PLAYING && e >= 8 && 0 == t) return void (n._videoElement.paused ? s != Conviva.PlayerStateManager.PlayerState.PAUSED && (n._log("Adjusting Conviva player state to: PAUSED"), n._updateConvivaPlayerState(Conviva.PlayerStateManager.PlayerState.PAUSED)) : n._videoElement.seeking || (n._log("Adjusting Conviva player state to: BUFFERING"), n._updateConvivaPlayerState(Conviva.PlayerStateManager.PlayerState.BUFFERING))); if (n._currentTimeIsInvalid) return void (n._videoElement.paused ? (s != Conviva.PlayerStateManager.PlayerState.PAUSED && (n._log("Adjusting Conviva player state to: PAUSED"), n._updateConvivaPlayerState(Conviva.PlayerStateManager.PlayerState.PAUSED)), n._timeupdate = n._lastTimeupdate) : n._videoElement.seeking || (n._timeupdate > 1 && n._timeupdate == n._lastTimeupdate && (n._log("Adjusting Conviva player state to: BUFFERING"), n._updateConvivaPlayerState(Conviva.PlayerStateManager.PlayerState.BUFFERING)), n._lastTimeupdate = n._timeupdate)) } }, this._stopPolling = function () { this._pollingTimerCancel() }, this._resetPlayHeadTimes = function () { n._lastPlayHeadTimeSpeeds = [], n._previousPosition = -1, n._lastPollTime = 0 }, this._resetTimeupdate = function () { n._lastTimeupdate = 0, n._timeupdate = 0 }, this._log = function (e) { this._loggingInterface.log(e, Conviva.SystemSettings.LogLevel.DEBUG) }, function (e, t) { if (this._log("Html5PlayerInterface._constr()"), !e) throw new Error("Html5PlayerInterface: playerStateManager argument cannot be null."); if (!t) throw new Error("Html5PlayerInterface: videoElement argument cannot be null."); this._playerStateManager = e, this._videoElement = t, this._eventListeners = [], this._registerVideoEventListeners(), this._resetPlayHeadTimes(), this._resetTimeupdate(), this._startPolling(), this._findCurrentState(), this._playerStateManager.setClientMeasureInterface(this), this._playerStateManager.setModuleNameAndVersion("HTML5", Conviva.Client.version) }.apply(this, arguments), this.cleanup = function () { this._log("Html5PlayerInterface.cleanup()"), this._stopPolling(), this._removeVideoEventHandlers(), this._videoElement = null, this._playerStateManager = null } }, Conviva.Impl = Conviva.Impl || {}, Conviva.Impl.Html5Http = function () { (function () { }).apply(this, arguments), this.makeRequest = function (e, t, a, n, i, r) { return this.makeRequestStandard.apply(this, arguments) }, this.makeRequestStandard = function (e, t, a, n, i, r) { var o = new XMLHttpRequest; return o.open(e, t, !0), n && o.overrideMimeType && (o.overrideMimeType = n), n && o.setRequestHeader && o.setRequestHeader("Content-Type", n), i > 0 && (o.timeout = i, o.ontimeout = function () { o.ontimeout = o.onreadystatechange = null, r && r(!1, "timeout after " + i + " ms") }), o.onreadystatechange = function () { 4 === o.readyState && (o.ontimeout = o.onreadystatechange = null, 200 == o.status ? r && r(!0, o.responseText) : r && r(!1, "http status " + o.status)) }, o.send(a), null }, this.release = function () { } }, Conviva.Impl = Conviva.Impl || {}, Conviva.Impl.Html5Logging = function () { (function () { }).apply(this, arguments), this.consoleLog = function (e, t) { "undefined" != typeof console && (console.log && t === Conviva.SystemSettings.LogLevel.DEBUG || t === Conviva.SystemSettings.LogLevel.INFO ? console.log(e) : console.warn && t === Conviva.SystemSettings.LogLevel.WARNING ? console.warn(e) : console.error && t === Conviva.SystemSettings.LogLevel.ERROR && console.error(e)) }, this.release = function () { } }, Conviva.Impl = Conviva.Impl || {}, Conviva.Impl.Html5Metadata = function () { (function () { }).apply(this, arguments), this.getBrowserName = function () { return null }, this.getBrowserVersion = function () { return null }, this.getDeviceBrand = function () { return null }, this.getDeviceManufacturer = function () { return null }, this.getDeviceModel = function () { return null }, this.getDeviceType = function () { return null }, this.getDeviceVersion = function () { return null }, this.getFrameworkName = function () { return "HTML5" }, this.getFrameworkVersion = function () { return null }, this.getOperatingSystemName = function () { return null }, this.getOperatingSystemVersion = function () { return null }, this.release = function () { } }, Conviva.Impl = Conviva.Impl || {}, Conviva.Impl.Html5Storage = function () { (function () { }).apply(this, arguments), this.saveData = function (e, t, a, n) { var i = e + "." + t; try { localStorage.setItem(i, a), n(!0, null) } catch (e) { n(!1, e.toString()) } }, this.loadData = function (e, t, a) { var n = e + "." + t; try { var i = localStorage.getItem(n); a(!0, i) } catch (e) { a(!1, e.toString()) } }, this.release = function () { } }, Conviva.Impl = Conviva.Impl || {}, Conviva.Impl.Html5Time = function () { (function () { }).apply(this, arguments), this.getEpochTimeMs = function () { return (new Date).getTime() }, this.release = function () { } }, Conviva.Impl = Conviva.Impl || {}, Conviva.Impl.Html5Timer = function () { (function () { }).apply(this, arguments), this.createTimer = function (e, t, a) { var n = setInterval(e, t); return function () { -1 !== n && (clearInterval(n), n = -1) } }, this.release = function () { } };
